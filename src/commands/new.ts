import { Command } from "@/commander";
import { Maybe, slugify, timeMs } from "../utils.ts";
import { EtuStorage } from "../storage.ts";

interface ENewOpts {
    id: string;
}

const action = async (name: string, rate: number, initialHours: Maybe<number>, { id }: ENewOpts) => {
    if (id) {
        const project = await EtuStorage.getProjectById(id);
        if (project.isSome()) throw new Error(`Project with id ${id} already exists.`);
    }

    const slug = id || slugify(name);
    await EtuStorage.putProject({ name, rate, slug });

    if (initialHours) {
        const currentTime = new Date().valueOf();
        await EtuStorage.putSession(slug, {
            name: "Initial hours",
            start: currentTime - timeMs({ h: initialHours }),
            end: currentTime
        });
    }

    await EtuStorage.setDefaultProject(slug);
}

export const create = (cmd: Command) => {
    return cmd.command('new')
        .description('Start a new project and set it as the default.')
        .option('-i --id <string>', 'the slug to use for the project. autogenerated by default.')
        .argument('<name>', 'name to use for the project.')
        .argument('<rate>', 'hourly rate', Number)
        .argument('[initial-hours]', 'number of hours to log to start with', Number)
        .action(action);
}
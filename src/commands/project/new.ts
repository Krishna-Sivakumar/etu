import { Command } from "@/commander";
import { Maybe, slugify, timeMs } from "../../utils.ts";
import * as storage from "../../storage.ts";

interface ENewOpts {
    id: string;
}

const action = async (name: string, rate: number, initialHours: Maybe<number>, { id }: ENewOpts) => {
    if (id) {
        const project = await storage.getProjectById(id);
        if (project.isSome()) throw new Error(`Project with id ${id} already exists.`);
    }

    if (id === 'default') {
        throw new Error("You can't use that as a slug!");
    }

    if (slugify(id) === 'default') {
        throw new Error("You can't use that as a name!");
    }

    const slug = id || slugify(name);
    await storage.putProject({ name, rate, slug });

    if (initialHours) {
        const currentTime = Date.now();
        await storage.putSession(slug, {
            name: "Initial hours",
            start: currentTime - timeMs({ h: initialHours }),
            end: currentTime
        });
    }

    console.log(`Created project "${name}" with id ${slug}. Rate is ${storage.getCurrency()}${rate}/hr. ${initialHours ? "Initial hours: " + initialHours + "." : ""}`);
    await storage.setDefaultProject(slug);
}

export const create = new Command('new')
    .description('Start a new project and set it as the default.')
    .option('-i --id <string>', 'the slug to use for the project. autogenerated by default.')
    .argument('<name>', 'name to use for the project.')
    .argument('<rate>', 'hourly rate', Number)
    .argument('[initial-hours]', 'number of hours to log to start with', Number)
    .action(action);
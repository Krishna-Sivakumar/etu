import "@commander/extra-typings";
import { Command } from '@commander';
import { Maybe } from "./utils.ts";
import { kv } from './kv.ts'

const getProject = (id: Maybe<string>) => {

}

const etu = new Command();

etu
    .name('etu')
    .description('A simple time-tracker application.')
    .version('0.0.1')
    .option('-p --path', 'The path to store the db at.')
    .showHelpAfterError();

interface ENewOpts {
    id: string;
}

etu.command('new')
    .description('Start a new project and set it as the default.')
    .option('-i --id <string>', 'the slug to use for the project. autogenerated by default.')
    .argument('<name>', 'name to use for the project.')
    .argument('<rate>', 'hourly rate', Number)
    .argument('[initial-hours]', 'number of hours to log to start with', Number)
    .action((name: string, rate: number, initialHours: Maybe<number>, { id }: ENewOpts) => {
        console.log({ name, rate, initialHours, id });
    });

interface EStartOpts {
    id: string;
}

etu.command('start')
    .option('-i --id <string>', 'id of the project to start. Uses the default if not specified.')
    .argument('[session-name]', 'Optional name for the session.')
    .description('Start the clock.')
    .action((name: Maybe<string>, { id }: EStartOpts) => {
        console.log(name, id);
    });

interface EStopOpts {
    id: string;
}

etu.command('stop')
    .option('-i --id <string>', 'id of the project to stop. Uses the default if not specified.')
    .description('Stop the clock.')
    .action(({ id }: EStopOpts) => {

    });

interface ESummaryOpts {
    log: boolean;
    id: string;
}

etu.command('summary')
    .option('-i --id <string>', 'id of the project to summarize. Uses the default if not specified.')
    .option('--no-log', "Don't print the log of hours worked.")
    .description('Print the summary (hours worked, total billing) of the project.')
    .action(({ log, id }: ESummaryOpts) => {
        console.log(log, id);
    })

interface ELogOpts {
    id: string
}

etu.command('log')
    .option('-i --id <string>', 'id of the project to print the log for. Uses the default if not specified.')
    .description('Print the log (every session) of the project.')
    .action(({ id }: ELogOpts) => {

    })

etu.command('default')
    .argument('<id>', 'id of the project to set as default.')
    .description('Change the default project.')
    .action((id: string) => {

    })

etu.parse(Deno.args, { from: "user" });